name: Build .NET Desktop

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write

jobs:
  build:
    runs-on: windows-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Increment build number in AssemblyInfo.cs
        id: increment
        shell: pwsh
        run: |
          $file = 'VokabelTrainer/Properties/AssemblyInfo.cs'
          $content = Get-Content $file
          $newContent = @()
          $newVersion = $null

          foreach ($line in $content) {
            if ($line -match 'AssemblyVersion\("(\d+)\.(\d+)\.(\d+)\.(\d+)"\)') {
              $major = $matches[1]
              $minor = $matches[2]
              $build = [int]$matches[3] + 1
              $revision = "0"
              $newVersion = "$major.$minor.$build.$revision"
              $newContent += "[assembly: AssemblyVersion(`"$major.$minor.$build.$revision`")]"
            }
            elseif ($line -match 'AssemblyFileVersion\("(\d+)\.(\d+)\.(\d+)\.(\d+)"\)') {
              $major = $matches[1]
              $minor = $matches[2]
              $build = [int]$matches[3] + 1
              $revision = "0"
              $newVersion = "$major.$minor.$build.$revision"
              $newContent += "[assembly: AssemblyFileVersion(`"$major.$minor.$build.$revision`")]"
            }
            else {
              $newContent += $line
            }
          }

          if (-not $newVersion) {
            Write-Error "Couldn't find AssemblyVersion/AssemblyFileVersion in $file"
            exit 1
          }

          Set-Content $file $newContent

          # publish the version as a step output in the new ($GITHUB_OUTPUT) format
          Add-Content -Path $env:GITHUB_OUTPUT -Value "version=$newVersion"

      - name: Commit version change
        uses: EndBug/add-and-commit@v9
        with:
          message: "Set version to ${{ steps.increment.outputs.version }}"
          add: 'VokabelTrainer/Properties/AssemblyInfo.cs'
          github_token: ${{ secrets.GH_TOKEN }}


      - name: Setup NuGet
        uses: NuGet/setup-nuget@v2

      - name: Restore NuGet packages
        run: nuget restore VokabelTrainer.sln

      # - name: Download SNK file from secrets
      #   run: |
      #     $snkBytes = [System.Convert]::FromBase64String("${{ secrets.SNK_FILE }}")
      #     [System.IO.File]::WriteAllBytes("VokabelTrainer/MyKey.snk", $snkBytes)

      # - name: Build and sign with SNK
      #   run: msbuild VokabelTrainer.sln /p:Configuration=Release /p:SignAssembly=true /p:AssemblyOriginatorKeyFile=MyKey.snk


      # - name: Download PFX file from secrets
      #   run: |
      #     $pfxBytes = [System.Convert]::FromBase64String("${{ secrets.PFX_FILE }}")
      #     [System.IO.File]::WriteAllBytes("VokabelTrainer/MyCert.pfx", $pfxBytes)

      # - name: Sign executable with PFX
      #   run: |
      #     & "C:\Program Files (x86)\Windows Kits\10\bin\x64\signtool.exe" sign /f VokabelTrainer/MyCert.pfx /p ${{ secrets.PFX_PASSWORD }} /tr http://timestamp.digicert.com /td sha256 /fd sha256 VokabelTrainer/bin/Release/VokabelTrainer.exe

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2
      #  with:
      #    vs-version: '17.8'

      - name: Build solution
        run: msbuild VokabelTrainer.sln /p:Configuration=Release
      # /verbosity:diag

      #- name: Upload built zip archive
      #  uses: actions/upload-artifact@v4
      #  with:
      #    name: VokabelTrainer-zip
      #    path: VokabelTrainer/bin/VokabelTrainer.zip

      - name: Rename output zip to include version
        shell: pwsh
        run: |
          $version = '${{ steps.increment.outputs.version }}'
          $src = 'VokabelTrainer/bin/VokabelTrainer.zip' 
          $dest = "VokabelTrainer/bin/VokabelTrainer-v${version}.zip"
          if (-not (Test-Path $src)) {
            Write-Error "Source zip not found: $src"
            exit 1
          }
          if (Test-Path $dest) { Remove-Item $dest -Force }
          Move-Item -Path $src -Destination $dest -Force
          Write-Host "Renamed $src -> $dest"


      - name: Upload built zip archive
        uses: actions/upload-artifact@v4
        with:
          name: VokabelTrainer-v${{ steps.increment.outputs.version }}
          path: VokabelTrainer/bin/VokabelTrainer-v${{ steps.increment.outputs.version }}.zip

      - name: Generate release notes (commits since last tag and since last minor version)
        id: generate_release_notes
        shell: pwsh
        run: |
          $version = '${{ steps.increment.outputs.version }}'

          # Ensure tags are available
          git fetch --tags

          # Get tags sorted by creation date (newest first)
          $tags = git for-each-ref --sort=-creatordate --format '%(refname:short)' refs/tags | ForEach-Object { $_ }

          $prevTag = if ($tags.Length -gt 0) { $tags[0] } else { "" }

          # Parse current major.minor from incremented version
          $major = $null; $minor = $null
          if ($version -match '^(\d+)\.(\d+)\.(\d+)\.(\d+)$') {
            $major = $matches[1]; $minor = $matches[2]
          }

          # Find most recent tag with same major.minor
          $minorTag = ""
          if ($major -ne $null) {
            foreach ($t in $tags) {
              if ($t -match 'VokabelTrainer_v(\d+)\.(\d+)\.(\d+)\.(\d+)') {
                if ($matches[1] -eq $major -and $matches[2] -eq $minor) {
                  $minorTag = $t
                  break
                }
              }
            }
          }

          # Helper: get commits between range (exclude merge commits), filter out version-bump commit
          function Get-Commits($range) {
            if ([string]::IsNullOrEmpty($range)) {
              $list = git log --pretty=format:'- %s (%an)' --no-merges
            } else {
              $list = git log $range --pretty=format:'- %s (%an)' --no-merges
            }
            if ($list) {
              $lines = $list -split "`n" | Where-Object { $_ -notmatch 'Set version to' }
              return ,$lines
            }
            return @()
          }

          if ($prevTag -ne "") {
            $commits = Get-Commits("$prevTag..HEAD")
          } else {
            $commits = Get-Commits("")
          }

          if ($minorTag -ne "") {
            # If minorTag is same as prevTag, minorCommits will be same as commits
            if ($minorTag -ne $prevTag) {
              $minorCommits = Get-Commits("$minorTag..HEAD")
            } else {
              $minorCommits = $commits
            }
          } else {
            $minorCommits = $commits
          }

          if ($commits.Count -eq 0) { $commits = @("- (no commits found)") }
          if ($minorCommits.Count -eq 0) { $minorCommits = @("- (no commits found)") }

          $releaseBody = "Commits since last tag ($prevTag):`n"
          $releaseBody += ($commits -join "`n")
          $releaseBody += "`n`nCommits since last minor version ($minorTag):`n"
          $releaseBody += ($minorCommits -join "`n")

          # Publish as multiline step output
          [System.IO.File]::AppendAllText($env:GITHUB_OUTPUT, "release_body<<EOF`n$releaseBody`nEOF`n")

      - name: Create and push tag
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          # ensure history & tags are present
          # Only run --unshallow if the repo is actually shallow to avoid the harmless fatal
          if (Test-Path -Path ".git\shallow") {
            git fetch --unshallow --tags || git fetch --tags
          } else {
            git fetch --tags
          }

          $tag = "VokabelTrainer_v${{ steps.increment.outputs.version }}"
          if (git rev-parse --verify $tag 2>$null) {
             Write-Host "Tag $tag already exists; skipping"
          } else {
             git tag -a $tag -m "Release $tag"
             git push origin refs/tags/$tag
             Write-Host "Created and pushed tag $tag"
          }


      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: VokabelTrainer_v${{ steps.increment.outputs.version }}
          release_name: VokabelTrainer v${{ steps.increment.outputs.version }}
          body: ${{ steps.generate_release_notes.outputs.release_body }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: VokabelTrainer/bin/VokabelTrainer-v${{ steps.increment.outputs.version }}.zip
          asset_name: VokabelTrainer-v${{ steps.increment.outputs.version }}.zip
          asset_content_type: application/zip
